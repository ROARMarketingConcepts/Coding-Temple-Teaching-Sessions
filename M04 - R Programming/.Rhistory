df1$weekday_or_weekend[df1$day %in% c("Monday","Tuesday","Wednesday","Thursday","Friday")] <- "Weekday"
df1$weekday_or_weekend[df1$day %in% c("Saturday","Sunday")] <- "Weekend"
# Calculate mean number of steps for each time interval on Weekdays and Weekends
mean_steps <- aggregate(df1$steps, by=list(df1$weekday_or_weekend,df1$interval), mean)
names(mean_steps) <- c("Weekday_Weekend","time","steps")
# Sort 'mean_steps' by weekday/weekend and then by time
mean_steps <- mean_steps %>% arrange(Weekday_Weekend, time)
# The 'Weekday_Weekend' column must be converted to a factor variable for plotting
mean_steps$Weekday_Weekend <- as.factor(mean_steps$Weekday_Weekend)
# Create plots
# png("Mean Number of Steps by Time of Day Weekday Weekend.png")
ggplot(mean_steps, aes(x=time, y=steps))+geom_line()+facet_wrap(~Weekday_Weekend,nrow=2)+xlab("Time of Day")+ylab("Mean steps")+ggtitle("Mean Number of Steps by Time of Day")
# dev.off()
View(bigrs)
View(word_list)
demo()
knitr::opts_chunk$set(echo = TRUE)
# eCornell Hex Codes:
crimson = '#b31b1b' #Crimson
lightGray = '#cecece' #lightGray
darkGray = '#606366'
skyBlue = '#92b2c4' #skyblue
gold = '#fbb040' #gold
ecBlack = '#393f47' #ecBlack
# Load the data.
school = read.csv('mrc_table2.csv', header = TRUE, check.names = FALSE)
school = school[,names(school) %in%
c('name', 'type', 'tier', 'tier_name', 'mr_kq5_pq1',
'par_median', 'k_median')]
names(school)[5:7] <- c("mobility_rate", "parent_income", "student_income")
## Calculate the mean parent income for students at highly selective private schools:
school = school[school$tier_name %in% c("Highly selective private", "Highly selective public"),]
par.income.prv = school$parent_income[school$tier_name == 'Highly selective private']
mean(par.income.prv)
## Calculate the mean parent income for students at highly selective public schools.
par.income.pub = school$parent_income[school$tier_name == 'Highly selective public']
mean(par.income.pub)
# Create the boxplot:
boxplot(par.income.prv, par.income.pub, names = c('Highly selective private', 'Highly selective public'), ylab = 'Parent Income (USD)',
main = 'Parent Income: HS private and public schools', col = ecBlack)
# Create a permutation distribution:
set.seed(1)
P = 10000
store_mean_diff = rep(0, P)
for (n in 1:P){
school.perm = school
school.perm$parent_income = sample(school.perm$parent_income, replace = FALSE)
school.perm.prv = school.perm$parent_income[school.perm$tier_name == 'Highly selective private']
school.perm.pub = school.perm$parent_income[school.perm$tier_name == 'Highly selective public']
store_mean_diff[n] = mean(school.perm.prv) - mean(school.perm.pub)
}
# Plot the observed sample statistic on the histogram:
hist(store_mean_diff, breaks = 20, freq = FALSE, col = ecBlack, border = 'white',
xlab = 'Mean Diff of Parent Income',
main = 'Histogram of Parent Income Diff (Permuted Data)')
install.packages('tidyverse')
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library("tidyverse")
install.packages("tidyverse")
help()
install.packages(c("nycflights13", "gapminder", "Lahman"))
myplot <- mpg
mpg
mpg
# install.packages("tidyverse")
library("tidyverse")
help()
install.packages(c("nycflights13", "gapminder", "Lahman"))
myplot <- load(mpg)
myplot <- load('mpg')
str(mpg)
myplot = mpg
View(myplot)
View(myplot)
myplot <- mpg
# Load the datasets package (usually not necessary as it's loaded by default)
library(datasets)
# Import the mtcars dataset
data(CO2)
# Display the first few rows of the dataset
head(CO2)
# Load the datasets package (usually not necessary as it's loaded by default)
library(datasets)
# Import the CO2 dataset
data(CO2)
# Display the first few rows of the dataset
head(CO2)
# Get a set of summary stats for the dataset
summary(CO2)
View(CO2)
# Create a histogram
hist(CO2,
main="Histogram of Random Numbers",
xlab="Value",
ylab="Frequency",
col="blue",
border="black")
# Create a histogram
hist(CO2$conc,
main="Histogram of Random Numbers",
xlab="Value",
ylab="Frequency",
col="blue",
border="black")
# Create a histogram
hist(CO2$conc,
main="Histogram of CO2$conc",
xlab="Value",
ylab="Frequency",
col="blue",
border="black")
# Create a histogram
hist(CO2$conc,
main="Histogram of CO2$conc",
xlab="conc Value",
ylab="Frequency",
col="blue",
border="black")
# Create a histogram
hist(CO2$uptake,
main="Histogram of CO2$uptake",
xlab="conc Value",
ylab="Frequency",
col="blue",
border="black")
head(CO2)
summary(CO2)
library(tidyverse)
CO2
head(CO2)
summary(CO2)
ggplot(CO2, aes(x=Treatment, y=uptake, fill=Treatment)) +
geom_col() +
labs(title = "Uptake of C02 by Treatment",
x = "Treatment",
y = "Uptake Of CO2") +
theme_classic()
#2. Uptake of C02 by Type:
ggplot(CO2, aes(x=Type, y=uptake, fill=Type)) +
geom_col() +
labs(title = "Uptake of CO2 by Type")
#3. Box plot analysis by Type:
ggplot(CO2, aes(x=uptake, y=Type)) +
geom_boxplot()
plant_group <- group_by(CO2, Plant) %>%
summarize(avg_uptake = mean(uptake))
ggplot(plant_group, aes(x=Plant, y=avg_uptake)) +
geom_line(group = 1) +
geom_point() +
labs(title = "Average Uptake of CO2 by Plant",
x = "Plant",
y = "Average Uptake")
co2_uptake <- select(CO2, uptake)
co2_conc <- select(CO2, conc)
correlation_result <- cor(co2_conc, co2_uptake)
print(correlation_result)
# Load the datasets package (usually not necessary as it's loaded by default)
library(datasets)
library(ggplot2)
# Import the CO2 dataset
data(mtcars)
# Display the first few rows of the dataset
head(mtcars)
# Get a set of summary stats for the dataset
summary(mtcars)
# Create a histogram
ggplot(mtcars, aes(x=mpg)) +
geom_histogram(color = "black", fill = "steelblue", binwidth = 1) +
labs(x = "MPG", y = "Frequency") +
ggtitle("Histogram of MPG") +
theme_minimal()
# Create a histogram
ggplot(mtcars, aes(x=wt)) +
geom_histogram(color = "black", fill = "steelblue", binwidth = 0.1) +
labs(x = "Weight", y = "Frequency") +
ggtitle("Histogram of Weight") +
theme_minimal()
ggplot(mtcars, aes(x = factor(cyl))) +
geom_bar(color = "black", fill = "steelblue") +
labs(title = "Frequency of Number of Cylinders", x = "Number of Cylinders", y = "Count") + theme_minimal()
ggplot(mtcars, aes(x = factor(gear))) +
geom_bar(color = "black", fill = "steelblue") +
labs(title = "Frequency of Gear Type", x = "Gear Type", y = "Count") + theme_minimal()
# Load the datasets package (usually not necessary as it's loaded by default)
library(datasets)
library(ggplot2)
# Import the CO2 dataset
data(mtcars)
# Display the first few rows of the dataset
head(mtcars)
# Get a set of summary stats for the dataset
summary(mtcars)
positive <- c("21", "22", "33", "21", "27") ##Percentage
negative<- c("71", "77", "67", "79", "73")  ##Precentage
sample <- c("Hr", "Fi", "We", "Pa", "Ki")
mydata <- data.frame(positive , negative, sample)
mydata
mydata %>% pivot_longer(cols = !sample, names_to = "status", values_to = "percentage") %>%
ggplot(aes(fill = status, x = sample, y = percentage)) +
geom_bar(position = "stack", stat = "identity")
mydata %>% pivot_longer(cols = !sample, names_to = "status", values_to = ="percentage") %>%
mydata %>% pivot_longer(cols = !sample, names_to = "status", values_to ="percentage") %>%
ggplot(aes(fill = status, x = sample, y = percentage)) +
geom_bar(position = "stack", stat = "identity")
library(tidyverse)
mydata %>% pivot_longer(cols = !sample, names_to = "status", values_to ="percentage") %>%
ggplot(aes(fill = status, x = sample, y = percentage)) +
geom_bar(position = "stack", stat = "identity")
library(datasets)
library(ggplot2)
data(mtcars)
library(datasets)
library(ggplot2)
data(mtcars)
head(mtcars)
ggplot(mtcars, aes(x = cyl,fill = vs )) +
geom_bar()
ggplot(mtcars, aes(x = cyl,fill = gear )) +
geom_bar()
ggplot(mtcars, aes(x = factor(cyl),fill = gear )) +
geom_bar()
ggplot(mtcars, aes(x = factor(cyl),fill = factor(gear)) +
geom_bar()
ggplot(mtcars, aes(x = factor(cyl),fill = factor(gear))) +
geom_bar()
ggplot(mtcars, aes(x = factor(cyl),fill = factor(gear))) +
geom_bar() +
labs(x = "Number of Cylinders")
ggplot(mtcars, aes(x = factor(cyl),fill = factor(gear))) +
geom_bar() +
labs(x = "Number of Cylinders", fill = "Number of Gears")
my_vector <- c(1,3,5,7,9)
print(my_vector)
my_vector [3]
my_vector `<- c(1,3,5,7,9)
my_vector [2] * 2
my_vector `<- c(1,3,5,7,9)
my_vector <- c(1,3,5,7,9)
my_vector <- my_vector [2] * 2
my_vector
my_list <- list(vector = c(10,20,30), country c("USA", "England", "Japan"),
my_list <- list(vector = c(10,20,30), country = c("USA", "England", "Japan"),
city =  data.frame c("Philadelphia", "London","Tokyo"),
# Victor:
# 1. create a numeric vector named my_victor
my_vector <- c(1,3,5,7,9)
# 2. Extract the third element from my_vector
third_element_extract <- my_victor[3]
# Victor:
# 1. create a numeric vector named my_victor
my_vector <- c(1,3,5,7,9)
# 2. Extract the third element from my_vector
third_element_extract <- my_vector[3]
# 3. Updating second element twice origianl value
my_vector_twice <- my_vector[2] * 2
student_data <- data.frame(Student_ID = c(1:5), Name = c("Bob","John","Gus","Willy","lilly"), Score = c(87,90,91,62,98))
student_data
student_data$Score[3] <- 95
student_data
my_list <- list(
c(10, 20, 30),
c("USA", "Englend", "Norway"),
data.frame(
City = c("New York", "London", "Oslo"),
Population = c(3429000, 2030000, 500000)
)
)
my_list
# Access and print the second element of the character vector within my_list
second_country <- my_list[[2]][2]
print(second_country)
library("dplyr")
mtcars
select(mtcars,cyl,disp,hp,drat)
high_hp_cars <- data.frame(filter(mtcars, hp > 150))
library(tidyverse)
library(lubridate)
library(skimr)
library(dplyr)
life_exp <- read.csv("data/Life Expectancy Data.csv")
library(tidyverse)
library(lubridate)
library(skimr)
library(dplyr)
life_exp <- read.csv("data/Life Expectancy Data.csv")
View(life_exp)
str(life_exp)  # View the structure of the dataset
head(life_exp)  # Preview the first few rows
summary(life_exp)  # Summary statistics of the dataset
skim(life_exp)  # Detailed skim of the dataset
missing_data <- colSums(is.na(life_exp))
missing_percent <- (missing_data/nrow(life_exp))*100
missing_df <- data.frame(
variable = names(missing_data),
missing_percent = missing_percent
)
View(missing_df)
library(tidyverse)
library(lubridate)
library(skimr)
library(dplyr)
life_exp <- read.csv("data/Life Expectancy Data.csv")
setwd("~/Desktop/Machine Learning and Data Analysis/Coding Temple/Coding-Temple-Teaching-Sessions/M04 - R Programming")
setwd("~/Desktop/Machine Learning and Data Analysis/Coding Temple/Coding-Temple-Teaching-Sessions/M04 - R Programming")
life_exp <- read.csv("data/Life Expectancy Data.csv")
ggplot(missing_df, aes(x = reorder(variable, missing_percent),
y = missing_percent)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_minimal() +
labs(title = "Percentage of Missing Values by Variable",
x = "Variables", y = "Missing Percentage")
View(life_exp)
View(life_exp)
View(life_exp)
View(life_exp)
life_clean <- life_exp %>%
mutate(
Year = as.Date(paste0(Year, "-01-01")),  # Convert Year to Date format
# Create a Development Status variable
Development_Status = ifelse(Status == "Developing", "Developing", "Developed"),
GDP_per_capita = GDP / Population  # Create new meaningful variable for GDP per capita
) %>%
filter(!is.na(Life.expectancy))  # Remove rows with missing life expectancy values
View(life_clean)
country_stats <- life_clean %>%
group_by(Country,Development_Status) %>%
summarise(
Avg_Life_Exp = mean(Life.expectancy),
Avg_GDP_per_capita = mean(GDP_per_capita),
Avg_Schooling = mean(Schooling, na.rm = TRUE),
Avg_BMI = mean(BMI, na.rm = TRUE))  %>%
arrange(desc(Avg_Life_Exp))
View(country_stats)
this is a code cell
# this is a code cell
yearly_trends <- life_clean %>%
group_by(Year, Development_Status) %>%
summarise(
Avg_Life_Exp = mean(Life.expectancy),
Avg_GDP_per_capita = mean(GDP_per_capita),
Avg_Alcohol = mean(Alcohol, na.rm = TRUE),
Avg_BMI = mean(BMI, na.rm = TRUE)
) %>%
ungroup()
time_plot <- ggplot(yearly_trends,
aes(x = Year, y = Avg_Life_Exp, color = Development_Status)) +
geom_line(linewidth = 1) +
geom_point() +
theme_minimal() +
labs(title = "Life Expectancy Trends Over Time",
subtitle = "Comparing Developed vs Developing Countries",
x = "Year", y = "Average Life Expectancy", color = "Development Status") +
theme(legend.position = "bottom")
print(time_plot)
View(yearly_trends)
scatter_plot <- ggplot(life_clean,
aes(x = GDP_per_capita, y = Life.expectancy, color = Development_Status)) +
geom_point(alpha = 0.6) +
scale_x_log10() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(title = "Life Expectancy vs GDP per Capita",
x = "GDP per Capita (log scale)", y = "Life Expectancy", color = "Development Status")
print(scatter_plot)
box_plot <- ggplot(life_clean,
aes(x = Development_Status, y = Life.expectancy, fill = Development_Status)) +
geom_boxplot() +
geom_jitter(alpha = 0.1) +
theme_minimal() +
labs(title = "Life Expectancy Distribution by Development Status",
x = "Development Status", y = "Life Expectancy")
print(box_plot)
t_test_result <- t.test(Life.expectancy ~ Development_Status, data = life_clean)
print(t_test_result)
correlation_matrix <- life_clean %>%
select(Life.expectancy, GDP_per_capita, Schooling, BMI) %>%
cor(use = "complete.obs")
print(correlation_matrix)
model <- lm(Life.expectancy ~ GDP_per_capita + Schooling + BMI, data = life_clean)
summary(model)
View(life_exp)
setwd("~/Desktop/Machine Learning and Data Analysis/Coding Temple/Coding-Temple-Teaching-Sessions/M04 - R Programming")
```{}
library(tidyverse)
happiness_df <- read.csv('data/WHR2023.csv')
View(happiness_df)
happiness_df <- read.csv('data/WHR2023.csv')
summary(happiness_df)
head(happiness_df)
happiness_df <- read.csv('data/WHR2023.csv')
summary(happiness_df)
head(happiness_df)
skim(happiness_df)
median_GDP_per_capita <- median(happiness_df$Logged.GDP.per.capita)
median_GDP_per_capita <- median(happiness_df$Logged.GDP.per.capita)
new_df <- happiness_df %>%
mutate(GDP = ifelse(Logged.GDP.per.capita > median_GDP_per_capita, "High GDP", "Low GDP"))
View(new_df)
median_GDP_per_capita <- median(happiness_df$Logged.GDP.per.capita)
new_df <- happiness_df %>%
mutate(GDP = ifelse(Logged.GDP.per.capita > median_GDP_per_capita, "High GDP", "Low GDP")) %>%
arrange(Logged.GDP.per.capita,descending)
median_GDP_per_capita <- median(happiness_df$Logged.GDP.per.capita)
new_df <- happiness_df %>%
mutate(GDP = ifelse(Logged.GDP.per.capita > median_GDP_per_capita, "High GDP", "Low GDP")) %>%
arrange(desc(Logged.GDP.per.capita))
View(new_df)
median_GDP_per_capita <- median(happiness_df$Logged.GDP.per.capita)
new_df <- happiness_df %>%
mutate(GDP = ifelse(Logged.GDP.per.capita > median_GDP_per_capita, "High GDP", "Low GDP")) %>%
arrange(desc(Logged.GDP.per.capita)) %>% filter(!is.na(Ladder.score))
median_GDP_per_capita <- median(happiness_df$Logged.GDP.per.capita)
new_df <- happiness_df %>%
mutate(GDP = ifelse(Logged.GDP.per.capita > median_GDP_per_capita, "High GDP", "Low GDP")) %>%
arrange(desc(Logged.GDP.per.capita)) %>% filter(!is.na(Ladder.score))
avPlots(model)
install.packages('car')
library(car)
library(tidyverse)
library(lubridate)
library(skimr)
library(dplyr)
library(car)
life_exp <- read.csv("data/Life Expectancy Data.csv")
avPlots(model)
library(tidyverse)
library(lubridate)
library(skimr)
library(dplyr)
library(car)
life_exp <- read.csv("data/Life Expectancy Data.csv")
str(life_exp)  # View the structure of the dataset
head(life_exp)  # Preview the first few rows
summary(life_exp)  # Summary statistics of the dataset
skim(life_exp)  # Detailed skim of the dataset
missing_data <- colSums(is.na(life_exp))
missing_percent <- (missing_data/nrow(life_exp))*100
missing_df <- data.frame(
variable = names(missing_data),
missing_percent = missing_percent
)
ggplot(missing_df, aes(x = reorder(variable, missing_percent),
y = missing_percent)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_minimal() +
labs(title = "Percentage of Missing Values by Variable",
x = "Variables", y = "Missing Percentage")
life_clean <- life_exp %>%
mutate(
Year = as.Date(paste0(Year, "-01-01")),  # Convert Year to Date format
# Create a Development Status variable
Development_Status = ifelse(Status == "Developing", "Developing", "Developed"),
GDP_per_capita = GDP / Population  # Create new meaningful variable for GDP per capita
) %>%
filter(!is.na(Life.expectancy))  # Remove rows with missing life expectancy values
country_stats <- life_clean %>%
group_by(Country,Development_Status) %>%
summarise(
Avg_Life_Exp = mean(Life.expectancy),
Avg_GDP_per_capita = mean(GDP_per_capita),
Avg_Schooling = mean(Schooling, na.rm = TRUE),
Avg_BMI = mean(BMI, na.rm = TRUE))  %>%
arrange(desc(Avg_Life_Exp))
yearly_trends <- life_clean %>%
group_by(Year, Development_Status) %>%
summarise(
Avg_Life_Exp = mean(Life.expectancy),
Avg_GDP_per_capita = mean(GDP_per_capita),
Avg_Alcohol = mean(Alcohol, na.rm = TRUE),
Avg_BMI = mean(BMI, na.rm = TRUE)
) %>%
ungroup()
time_plot <- ggplot(yearly_trends,
aes(x = Year, y = Avg_Life_Exp, color = Development_Status)) +
geom_line(linewidth = 1) +
geom_point() +
theme_minimal() +
labs(title = "Life Expectancy Trends Over Time",
subtitle = "Comparing Developed vs Developing Countries",
x = "Year", y = "Average Life Expectancy", color = "Development Status") +
theme(legend.position = "bottom")
print(time_plot)
scatter_plot <- ggplot(life_clean,
aes(x = GDP_per_capita, y = Life.expectancy, color = Development_Status)) +
geom_point(alpha = 0.6) +
scale_x_log10() +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(title = "Life Expectancy vs GDP per Capita",
x = "GDP per Capita (log scale)", y = "Life Expectancy", color = "Development Status")
print(scatter_plot)
box_plot <- ggplot(life_clean,
aes(x = Development_Status, y = Life.expectancy, fill = Development_Status)) +
geom_boxplot() +
geom_jitter(alpha = 0.1) +
theme_minimal() +
labs(title = "Life Expectancy Distribution by Development Status",
x = "Development Status", y = "Life Expectancy")
print(box_plot)
t_test_result <- t.test(Life.expectancy ~ Development_Status, data = life_clean)
print(t_test_result)
correlation_matrix <- life_clean %>%
select(Life.expectancy, GDP_per_capita, Schooling, BMI) %>%
cor(use = "complete.obs")
print(correlation_matrix)
model <- lm(Life.expectancy ~ GDP_per_capita + Schooling + BMI, data = life_clean)
summary(model)
avPlots(model)
